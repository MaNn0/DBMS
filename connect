#!/bin/bash

# Check if database name is provided
if [ -z "$1" ]; then
    echo "No database name provided."
    exit 1
fi

dbName="$1"
echo "You are now connected to the database: $dbName"
echo

# Navigate to the database directory
cd "$dbName" || { echo "Database '$dbName' not found."; exit 1; }

# List contents to check if tables exist
echo "Contents of database $dbName:"
ls -la

exit=true
while $exit; do
    COLUMNS=1
    echo
    PS3="Choose an option in $dbName: "
    select option in "list tables" "create table" "insert into table" "update table" "select from table" "delete record" "remove table" "exit database"; do
        case $option in
        "list tables")
            if [[ -z "$(ls -A)" ]]; then
                echo "There are no tables in this database."
            else
                echo "Tables in $dbName:"
                ls -p | grep -v / | grep -v "_metadata"
            fi
            break
            ;;
        "create table")
            read -p "Enter table name to create: " tableName
            if [[ "$tableName" =~ \  ]]; then
                echo "Table name cannot contain spaces"
            else
                ../../cTable "$tableName"
            fi
            ;;
        "insert into table")
            read -p "Enter table name to insert into: " tableName
            if [[ -e "$tableName" ]]; then
                ../../insertTable "$tableName"
            else
                echo "Table '$tableName' does not exist."
            fi
            ;;
        "update table")
            read -p "Enter table name to update: " tableName
            if [[ -z "$tableName" || ! -e "$tableName" ]]; then
                echo "Table '$tableName' does not exist."
            else
                ../../uTable "$tableName" 
            fi
            ;;  
        "select from table")
            read -p "Enter table name to select from: " tableName
            if [[ -e "$tableName" ]]; then
                echo "under development select from table"
            else
                echo "Table '$tableName' does not exist."
            fi
            ;;
        "delete record")
            read -p "Enter table name to delete a record from: " tableName
            if [[ -e "$tableName" ]]; then
                echo "under development delete record"
            else
                echo "Table '$tableName' does not exist."
            fi
            ;;
        "remove table")
            read -p "Enter table name to remove: " tableName
            if [[ -e "$tableName" ]]; then
                rm "$tableName"
                echo "Table '$tableName' removed successfully."
            else
                echo "Table '$tableName' does not exist."
            fi
            ;;
        "exit database")
            echo "Exiting database '$dbName' and returning to the main menu."
            exit=false
            break
            ;;
        *)
            echo "UNKNOWN OPTION"
            ;;
        esac
    done
done

#!/bin/bash

#!/bin/bash

#!/bin/bash

# # Check if database name is provided
# if [ -z "$1" ]; then
#     echo "Error: No database name provided."
#     exit 1
# fi

# dbName="$1"
# echo "You are now connected to the database: $dbName"

# # Navigate to the database directory
# cd "$dbName" || { echo "Error: Failed to access the database directory."; exit 1; }

# exit=true
# while $exit; do
#     echo "Select an operation:"
#     echo "1. List tables"
#     echo "2. Create table"
#     echo "3. Insert into table"
#     echo "4. Update table"
#     echo "5. Select from table"
#     echo "6. Delete record"
#     echo "7. Remove table"
#     echo "8. Exit database"
    
#     read -p "Enter your choice (1-8): " option

#     case $option in
#         1)
#             if [[ -z "$(ls -A)" ]]; then
#                 echo "There are no tables in this database."
#             else
#                 tables=$(ls -p | grep / | sed 's:/$::')
#                 echo "Tables in $dbName:\n$tables"
#             fi
#             ;;
#         2)
#             read -p "Enter table name to create: " tableName
#             if [[ "$tableName" =~ \  ]]; then
#                 echo "Error: Table name cannot contain spaces"
#             else
#                 ../../cTable "$tableName" # launch cTable script
#             fi
#             ;;
#         3)
#             read -p "Enter table name to insert into: " tableName
#             tableDir="./tables"  # Assuming the tables are inside a "tables" directory
#             metadataFile="$tableDir/${tableName}_metadata"
            
#             # Check if the table directory and metadata file exist
#             if [[ -e "$tableDir/$tableName" && -e "$metadataFile" ]]; then
#                 # If the directory and metadata file exist, call the insertTable script
#                 cd "$tableDir/$tableName" || exit 1
#                 if [[ -x "../../insertTable" ]]; then
#                     ../../insertTable "$tableName"  # Assuming insertTable is in the parent directory
#                 else
#                     echo "Error: 'insertTable' script is not executable or not found."
#                 fi
#             else
#                 echo "Error: Table '$tableName' or metadata file does not exist."
#             fi
#             ;;
#         4)
#             read -p "Enter table name to update: " tableName
#             if [[ -e "$tableName" ]]; then
#                 echo "Under development: update table feature"
#             else
#                 echo "Error: Table '$tableName' does not exist."
#             fi
#             ;;
#         5)
#             read -p "Enter table name to select from: " tableName
#             if [[ -e "$tableName" ]]; then
#                 echo "Under development: select from table feature"
#             else
#                 echo "Error: Table '$tableName' does not exist."
#             fi
#             ;;
#         6)
#             read -p "Enter table name to delete a record from: " tableName
#             if [[ -e "$tableName" ]]; then
#                 echo "Under development: delete record feature"
#             else
#                 echo "Error: Table '$tableName' does not exist."
#             fi
#             ;;
#         7)
#             read -p "Enter table name to remove: " tableName
#             if [[ -e "$tableName" ]]; then
#                 rm -rf "$tableName"
#                 echo "Table '$tableName' removed successfully."
#             else
#                 echo "Error: Table '$tableName' does not exist."
#             fi
#             ;;
#         8)
#             echo "Exiting database '$dbName' and returning to the main menu."
#             exit=false
#             ;;
#         *)
#             echo "Error: UNKNOWN OPTION"
#             ;;
#     esac
# done
