# #!/bin/bash

# # database as an argument
# if [ -z "$1" ]; then
#     echo "No database name provided."
#     exit 1
# fi

# dbName="$1"
# echo "You are now connected to the database: $dbName"
# # echo "You can perform operations within this database."
# echo
# #select database
# cd "$dbName"

# exit=true
# while $exit; do
# COLUMNS=1
# echo
#     PS3="Choose an option in $dbName: "
#     select option in "list tables" "create table" "insert into table" "update table" "select from table" "delete record" "remove table" "exit database"; do
#         case $option in
#         "list tables")
#             if [[ -z "$(ls -A)" ]]; then
#                 echo "There are no tables in this database."
#             else
#                 echo "Tables in $dbName:"
#                 ls -p | grep -v / | grep -v "_metadata" # validation for not showing directory -p -> add / to directory -v remove all directories ends with /
#             fi
#             break
#             ;;
#         "create table")
#             read -p "Enter table name to create: " tableName
#             if [[ "$tableName" =~ \  ]]; then
#                 echo "Table name cannot contain spaces"
#             else
#                 ../../cTable "$tableName" #launch cTable script
#             fi
#             ;;
#         "insert into table")
#     		read -p "Enter table name to insert into: " tableName
#     		if [[ -e "$tableName" ]]; then
#      		   ../../insertTable "$tableName" #launch insertTable script
#     		else
#        		    echo "Table '$tableName' does not exist."
#     		fi
#     		;;
#         "update table")
#             read -p "Enter table name to update: " tableName
#             if [[ -e "$tableName" ]]; then
#                 echo "under developing update"
#             else
#                 echo "Table '$tableName' does not exist."
#             fi
#             ;;
#         "select from table")
#             read -p "Enter table name to select from: " tableName
#             if [[ -e "$tableName" ]]; then
#               echo "under developing select from table"
#             else
#                 echo "Table '$tableName' does not exist."
#             fi
#             ;;
#         "delete record")
#             read -p "Enter table name to delete a record from: " tableName
#             if [[ -e "$tableName" ]]; then
#                 echo "under developing delete record"
#             else
#                 echo "Table '$tableName' does not exist."
#             fi
#             ;;
#         "remove table")
#             read -p "Enter table name to remove: " tableName
#             if [[ -e "$tableName" ]]; then
#                 rm "$tableName"
#                 echo "Table '$tableName' removed successfully."
#             else
#                 echo "Table '$tableName' does not exist."
#             fi
#             ;;
#         "exit database")
#             echo "Exiting database '$dbName' and returning to the main menu."
#             exit=false
#             break
#             ;;
#         *)
#             echo "UNKNOWN OPTION"
#             ;;
#         esac
#     done
# done

#!/bin/bash

# database as an argument
if [ -z "$1" ]; then
    zenity --error --text="No database name provided."
    exit 1
fi

dbName="$1"
zenity --info --text="You are now connected to the database: $dbName"

# Select database directory
cd "$dbName"

exit=true
while $exit; do
    COLUMNS=1
    echo
    PS3="Choose an option in $dbName: "
    option=$(zenity --list --title="Database Operations" --column="Options" --width=400 --height=300 \
    "List tables" \
    "Create table" \
    "Insert into table" \
    "Update table" \
    "Select from table" \
    "Delete record" \
    "Remove table" \
    "Exit database")

    case $option in
        "List tables")
            if [[ -z "$(ls -A)" ]]; then
                zenity --info --text="There are no tables in this database."
            else
                tables=$(ls -p | grep -v / | grep -v "_metadata")
                zenity --info --text="Tables in $dbName:\n$tables"
            fi
            ;;
        "Create table")
            tableName=$(zenity --entry --title="Create Table" --text="Enter table name to create:" --width=400)
            if [[ "$tableName" =~ \  ]]; then
                zenity --error --text="Table name cannot contain spaces"
            else
                ../../cTable "$tableName" # launch cTable script
            fi
            ;;
        "Insert into table")
            tableName=$(zenity --entry --title="Insert into Table" --text="Enter table name to insert into:" --width=400)
            if [[ -e "$tableName" ]]; then
                ../../insertTable "$tableName" # launch insertTable script
            else
                zenity --error --text="Table '$tableName' does not exist."
            fi
            ;;
        "Update table")
            tableName=$(zenity --entry --title="Update Table" --text="Enter table name to update:" --width=400)
            if [[ -e "$tableName" ]]; then
                zenity --info --text="Under development: update table feature"
            else
                zenity --error --text="Table '$tableName' does not exist."
            fi
            ;;
        "Select from table")
            tableName=$(zenity --entry --title="Select from Table" --text="Enter table name to select from:" --width=400)
            if [[ -e "$tableName" ]]; then
                zenity --info --text="Under development: select from table feature"
            else
                zenity --error --text="Table '$tableName' does not exist."
            fi
            ;;
        "Delete record")
            tableName=$(zenity --entry --title="Delete Record" --text="Enter table name to delete a record from:" --width=400)
            if [[ -e "$tableName" ]]; then
                zenity --info --text="Under development: delete record feature"
            else
                zenity --error --text="Table '$tableName' does not exist."
            fi
            ;;
        "Remove table")
            tableName=$(zenity --entry --title="Remove Table" --text="Enter table name to remove:" --width=400)
            if [[ -e "$tableName" ]]; then
                rm "$tableName"
                zenity --info --text="Table '$tableName' removed successfully."
            else
                zenity --error --text="Table '$tableName' does not exist."
            fi
            ;;
        "Exit database")
            zenity --info --text="Exiting database '$dbName' and returning to the main menu."
            exit=false
            ;;
        *)
            zenity --error --text="UNKNOWN OPTION"
            ;;
    esac
done
