#!/bin/bash

if [ -z "$1" ]; then
    echo "Table name not provided."
    exit 1
fi

tableName="$1"

# Check if table exists
if [[ ! -e "$tableName" ]]; then
    echo "Table '$tableName' does not exist."
    exit 1
fi

# Read the table structure and get the column details
columns=() #define empty array
#IFS= #empty value Prevents word splitting (preserves spaces).

while 
IFS= read -r line; do #This reads the file line by line into the variable line.
    columns+=("$line") #array contains columns 
done < "$tableName" #redirect file to while loop

declare -A record #-A  associative array >> y3ni Key-Value -- array holds column names as keys and user input as values.
declare primaryKeyColumn
primaryKeyValueSet=false

echo "Inserting into table '$tableName'..."

# Parse table structure and collect values 
for colDef in "${columns[@]}"; do
    IFS='|' read -r colName colType colKey <<< "$colDef" #columns[0]="id|int|PRIMARY_KEY"
    while true; do
        read -p "Enter value for column '$colName' ($colType): " value #entering value to assign in table ############

        # integer validation
       if [[ "$colType" == "int" && ! "$value" =~ ^[0-9]+$ ]]; then
           echo "Invalid value. '$colName' requires an integer."
           continue
        fi

        # PK validation [pk must be unique, PK can be in any column]
        if [[ "$colKey" == "PRIMARY_KEY" ]]; then
            if [[ -e "$tableName.data" ]]; then
                # PK column index
                pkIndex=$(grep -n "^$colName|" "$tableName" | cut -d: -f1)
                # Validate PK uniqueness 
                if awk -F'|' -v idx="$pkIndex" -v val="$value" '{ if ($idx == val) exit 1 }' "$tableName.data"; then
                    :
                else
                    echo "Error: Primary key value '$value' already exists."
                    continue
                fi
            fi
            primaryKeyValueSet=true
            primaryKeyColumn="$colName" #required to store to set not null
        fi

        record["$colName"]="$value"
        break
    done
done

# Must be not NULL already check in integer line 37

# Append record to the data file
output=""
for colDef in "${columns[@]}"; do
    IFS='|' read -r colName _ <<< "$colDef"
    value="${record[$colName]}"
    output+="$value|"
done

# Remove "|"
output="${output%|}"
echo "$output" >> "$tableName.data"

echo "Record inserted successfully into '$tableName'."

