#!/bin/bash

if [ -z "$1" ]; then
    echo "Error: Table name not provided."
    exit 1
fi

tableName="$1"
metadataFile=".$tableName""_metadata"

# Check if the table's metadata file exists
if [[ ! -f "$metadataFile" ]]; then
    echo "Error: Table '$tableName' does not exist."
    exit 1
fi

 #STORE METADATA INTO COULMNS ARRY 
columns=()
for line in $(cat "$metadataFile"); do #id:int:PK   #name:str
    echo $line
    columns+=("$line")
done

record=()  # Array to store column values
primaryKeySet=false

echo "Inserting into table '$tableName'..."

# Loop over each column to collect values
for colDef in "${columns[@]}" #coldef = id:int:PK  , name:str
do #id name age 
    IFS=':' read -r colName colType colKey <<< "$colDef"

    while true;
    do
        # Prompt the user for input
        read -p "Enter value for column '$colName' ($colType): " value

        # Validate input for integers
        if [[ "$colType" == "int" && ! "$value" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid value. '$colName' requires an integer."
            continue
        fi
        # Validate input for Str
        if [[ "$colType" == "str" && ! "$value" =~ ^[a-zA-Z]+$ ]]; then
            echo "Error: Invalid value. '$colName' requires strings only."
            continue
        fi


        # Validate PK
        if [[ "$colKey" == "PK" ]]
        then            #^hossam: first field pk must be first col in creating
            if grep -q "^$value:" "$tableName" 2>/dev/null #-q the pattern is found ? return 0[sucess] -- not found return 1[fail]  #always PK must be first column  ^$value:
            then 
                echo "Error: Primary key value '$value' already exists."
                continue
            fi
        fi

        # Store the value in the record array
        record+=("$value") #id name age mail #col1 col2 col3 col4 actully >> 1 hossam 25 amfa@gmail.com
        break
    done
done



output="" #empty
for value in "${record[@]}"
do
    output+="$value:" #add to output col1:col2:col3:
done



output=$( echo "$output" | sed 's/:$//' ) #removes last :

# Append the record to the table file
echo "$output" >> "$tableName" #check 79 in cTable
echo "Record inserted successfully into '$tableName'."
