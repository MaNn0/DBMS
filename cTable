#!/bin/bash

if [ -z "$1" ]; then
    echo "Table name not provided."
    exit 1
fi

tableName="$1"

if [[ -e "$tableName" ]]; then
    echo "Table '$tableName' already exists."
    exit 1
fi

read -p "Enter the number of columns: " columnCount

# Column count validation ^must start $must end
if ! [[ "$columnCount" =~ ^[0-9]+$ ]] || [ "$columnCount" -le 0 ]; then
    echo "Invalid number of columns. Must be a positive integer."
    exit 1
fi

# Flag to set pk true if set
primaryKeySet=true
declare -a columns # Declare array of columns
declare -a columnNames # Declare array for column names

# Loop over columns
for ((i=1; i<=columnCount; i++)); do 
    echo "Configuring column $i:"
    read -p "  Column name: " columnName # Set column name
    # Space constraint
    if [[ "$columnName" =~ \  ]]; then
        echo "Column name cannot contain spaces."
        ((i--)) # Go back to same column to rename
        continue # Skip to next loop
    fi

    while true; do
        read -p "  Column type (int/varchar): " columnType # Type of column
        if [[ "$columnType" =~ "int" || "$columnType" =~ "varchar" ]]; then
            break
        else
            echo "Invalid type. Please choose 'int' or 'varchar'."
        fi
    done

    # Ask for PK, if already chosen before (false) (won't ask) if true [flag]
    if $primaryKeySet; then
        read -p "  Set as primary key? (yes/no): " isPrimaryKey
        if [[ "$isPrimaryKey" =~ ^(y|yes) ]]; then
                primaryKeySet=false # The flag is now false 
                columnEntry="$columnName|$columnType|PRIMARY_KEY" # Assign column if no previous PK and chosen yes
            else
                columnEntry="$columnName|$columnType" # Assign column if no previous PK and chosen no
        fi
    else
        columnEntry="$columnName|$columnType" # Assign column if PK already exists
    fi

    columns+=("$columnEntry") 
    columnNames+=("$columnName") # Add the column name to columnNames array
done

# Write column names in a single line to the table file
echo "${columnNames[*]}" | tr ' ' '|' > "$tableName"

# Write table structure (metadata) to the metadata file
for col in "${columns[@]}"; do
    echo "$col" >> "${tableName}_metadata"
done

echo "Table '$tableName' created successfully with the following columns:"
cat "$tableName"

# #!/bin/bash

# # Check if database name is provided as an argument
# if [ -z "$1" ]; then
#     zenity --error --text="Table name not provided."
#     exit 1
# fi

# tableName="$1"

# # Check if table already exists
# if [[ -e "$tableName" ]]; then
#     zenity --error --text="Table '$tableName' already exists."
#     exit 1
# fi

# # Prompt for the number of columns
# columnCount=$(zenity --entry --title="Table Column Count" --text="Enter the number of columns:" --width=600)
# if ! [[ "$columnCount" =~ ^[0-9]+$ ]] || [ "$columnCount" -le 0 ]; then
#     zenity --error --text="Invalid number of columns. Must be a positive integer."
#     exit 1
# fi

# # Flag to set primary key (PK)
# primaryKeySet=true
# declare -a columns # Declare array to store column entries

# # Loop to configure columns
# for ((i=1; i<=columnCount; i++)); do 
#     # Prompt for column name
#     columnName=$(zenity --entry --title="Column Name" --text="Enter column name for column $i:" --width=600)

#     # Space constraint validation
#     if [[ "$columnName" =~ \  ]]; then
#         zenity --error --text="Column name cannot contain spaces."
#         ((i--)) # Go back to same column to rename
#         continue
#     fi

#     # Prompt for column type
#     while true; do
#         columnType=$(zenity --entry --title="Column Type" --text="Enter column type for column $i (int/varchar):" --width=600)
#         if [[ "$columnType" =~ "int" || "$columnType" =~ "varchar" ]]; then
#             break
#         else
#             zenity --error --text="Invalid type. Please choose 'int' or 'varchar'."
#         fi
#     done

#     # Prompt to set primary key
#     if $primaryKeySet; then
#         isPrimaryKey=$(zenity --entry --title="Primary Key" --text="Set as primary key? (yes/no):" --width=600)
#         if [[ "$isPrimaryKey" =~ ^(y|yes) ]]; then
#             primaryKeySet=false
#             columnEntry="$columnName|$columnType|PRIMARY_KEY"
#         else
#             columnEntry="$columnName|$columnType"
#         fi
#     else
#         columnEntry="$columnName|$columnType"
#     fi

#     # Add column to the array
#     columns+=("$columnEntry") 
# done

# mkdir "$tableName" && cd "$tableName"

# # Write table structure to the table file
# tableMetaData="${tableName}_metadata" #> "$tableMetaData"

# # If columns array is set, use it
# for col in "${columns[@]}"; do
#     echo "$col" >> "$tableMetaData"
# done

# # Create the new main table file
# newTableFile="$tableName"

# # awk -F'|' '{print $1}' "$tableMetaData" | paste -sd'|' - > "$newTableFile"
# # paste: A command-line utility to merge lines of files.
# # -s: Stands for "serial." This option makes paste concatenate all lines into a single line instead of working line-by-line.
# # -d'|': Specifies the delimiter (|) to separate the concatenated lines.
# # -: Reads input from standard input (pipe or redirection).

# # Show success message with table details
# zenity --info --title="Table Created" --text="Table '$tableName' created successfully\n"